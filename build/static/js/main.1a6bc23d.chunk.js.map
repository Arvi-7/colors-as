{"version":3,"sources":["img.png","img1.png","img2.png","img3.png","a1.png","img 4.png","img 5.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","popover","Popover","id","Title","as","Content","App","className","Navbar","sticky","collapseOnSelect","expand","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","eventKey","Jumbotron","Container","src","a1","alt","onClick","img","img1","img2","img3","img4","img5","fluid","color","size","title","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a6bc23d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img.b3294140.png\";","module.exports = __webpack_public_path__ + \"static/media/img1.4d33acde.png\";","module.exports = __webpack_public_path__ + \"static/media/img2.92ffc07e.png\";","module.exports = __webpack_public_path__ + \"static/media/img3.b05bb4da.png\";","module.exports = __webpack_public_path__ + \"static/media/a1.d465a3a9.png\";","module.exports = __webpack_public_path__ + \"static/media/img 4.5963b1aa.png\";","module.exports = __webpack_public_path__ + \"static/media/img 5.ef3422b1.png\";","import React from 'react';\nimport ReactDom from 'react-dom'\nimport Button from 'react-dom';\nimport useState from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Nav,Navbar} from 'react-bootstrap';\nimport { FaBeer, FaGoogle, FaGooglePlus,FaInstagram, FaYoutube } from 'react-icons/fa';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/container';\nimport a1 from './a1.png';\nimport Alert from 'react-bootstrap/Alert';\nimport img from './img.png';\nimport img1 from './img1.png'\nimport img2 from './img2.png'\nimport img3 from './img3.png'\nimport img4 from './img 4.png'\nimport img5 from './img 5.png'\n\nimport Popover from 'react-bootstrap/Popover'\nimport {OverlayTrigger,overlay} from 'react-bootstrap'\nimport render from 'react'\nimport StickyFooter from 'react-sticky-footer'\nimport Figure from 'react-bootstrap/Figure'\n\n\nimport {ToastHeader,Toast,Toastbody} from 'react-bootstrap';\n\n\n\nconst popover = (\n  <Popover id=\"popover-basic\">\n    <Popover.Title as=\"h3\">Popover right</Popover.Title>\n    <Popover.Content>\n      And here's some <strong>amazing</strong> content. It's very engaging.\n      right?\n    </Popover.Content>\n  </Popover>\n);\n\n\n\nconst example = () =>(\n  <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\n  <Button variant=\"success\">Click me to see</Button>\n</OverlayTrigger>\n)\n\n\n\n\nfunction App() {\n  \n  \n  return (\n    \n    <>\n    <div className=\"root col\" >\n     \n      <Navbar sticky='top' className='navbar' collapseOnSelect expand=\"lg\"  variant=\"dark\">\n  <Navbar.Brand href=\"#home\">colors</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\n    <Nav className=\"mr-auto\">\n    </Nav>\n    <Nav>\n      <Nav.Link href=\"#deets\">Home</Nav.Link>\n\n      <Nav.Link eventKey={2} href=\"#memes\">\n        About\n      </Nav.Link>\n      <Nav.Link href=\"#deets\">More</Nav.Link>\n      \n    </Nav>\n  </Navbar.Collapse>\n</Navbar>\n\n<body>\n<Jumbotron  className='jum'>\n  <Container>\n    <img  className='img' src={a1} alt='src'></img>\n    <h1 className='hh'>I'm Arvind</h1>\n    \n  </Container>\n</Jumbotron>\n<hr />\n\n<div id='c'>\n     <div className=\"row\">\n        <div className='col-sm-1'></div>\n          <div id='c1' className=\"card col-sm-3\">\n           <button className='b' onClick={popover}><img  id='i' src={img} alt={img}/></button>\n            \n          </div>\n          <div className='col-sm-4'></div>\n          <div id='c1' className=\"card col-sm-3\">\n              <img id='i' src={img1} alt={img1}/>\n          </div>\n          <div className='col-sm-1'></div>\n\n       </div>\n</div>\n\n<hr />\n\n<div id='c'>\n     <div className=\"row\">\n        <div className='col-sm-1'></div>\n          <div id='c1' className=\"card col-sm-3\">\n              <img   id='i'src={img2} alt={img2}/>\n          </div>\n          <div className='col-sm-4'></div>\n          <div id='c1' className=\"card col-sm-3\">\n              <img id='i'  src={img3} alt={img3}/>\n          </div>\n          <div className='col-sm-1'></div>\n\n       </div>\n</div>\n\n<hr/>\n\n<div id='c'>\n     <div className=\"row\">\n        <div className='col-sm-1'></div>\n          <div id='c1' className=\"card col-sm-3\">\n              <img   id='i' src={img4} alt=\"Avatar\"/>\n          </div>\n          <div className='col-sm-4'></div>\n          <div id='c1' className=\"card col-sm-3\">\n              <img id='i'  src={img5} alt=\"Avatar\"/>\n          </div>\n          <div className='col-sm-1'></div>\n\n       </div>\n\n       <hr />\n       <Jumbotron  className='jum'fluid>\n  <Container>\n    <button className='b' href='https://www.youtube.com/results?search_query=painting+of+flowers+by+bannu'>\n      <FaYoutube  color='black' size={200}/>\n      <h1>hgjckuy</h1>\n  \n</button>\n  </Container>\n</Jumbotron>\n</div>\n\n</body>\n\n\n\n    \n    \n      \n\n</div>\n<div>\n<footer className=\"page\">\n<a href='https://www.instagram.com/sireesha_kosuru/'className='a'> <FaInstagram  color=\"black\" size={50} title='instagram' /></a>\n\n<div  class=\"footer-copyright text-center py-3\"><strong>Â© 2020 Copyrights Colors</strong>\n<li><small>This is a page where you can explore some colors</small></li> \n  \n</div>\n\n</footer>\n\n</div>\n\n\n</>\n\n  );\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}